---
# Source: unifi/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: unifi
  namespace: unifi
  labels:
    app: unifi
    chart: "unifi-0.4.0"
    release: "unifi"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "20Gi"
---
# Source: unifi/templates/controller-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: unifi-controller
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi
    helm.sh/chart: unifi-0.4.0
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: controller
      protocol: TCP
      name: controller

  selector:
    app.kubernetes.io/name: unifi
    app.kubernetes.io/instance: unifi
---
# Source: unifi/templates/discovery-svc.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: unifi-discovery
#  labels:
#    app.kubernetes.io/name: unifi
#    helm.sh/chart: unifi-0.4.0
#    app.kubernetes.io/instance: unifi
#    app.kubernetes.io/managed-by: Tiller
#spec:
#  type: ClusterIP
#  ports:
#    - port: 10001
#      targetPort: discovery
#      protocol: UDP
#      name: discovery
#
#  selector:
#    app.kubernetes.io/name: unifi
#    app.kubernetes.io/instance: unifi
---
# Source: unifi/templates/gui-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: unifi-gui
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi
    helm.sh/chart: unifi-0.4.0
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - name: https-gui
      port: 8443
      protocol: TCP
      targetPort: https-gui

  selector:
    app.kubernetes.io/name: unifi
    app.kubernetes.io/instance: unifi
---
# Source: unifi/templates/stun-svc.yaml
#apiVersion: v1
#kind: Service
#metadata:
#  name: unifi-stun
#  labels:
#    app.kubernetes.io/name: unifi
#    helm.sh/chart: unifi-0.4.0
#    app.kubernetes.io/instance: unifi
#    app.kubernetes.io/managed-by: Tiller
#spec:
#  type: ClusterIP
#  ports:
#    - port: 3478
#      targetPort: stun
#      protocol: UDP
#      name: stun
#
#  selector:
#    app.kubernetes.io/name: unifi
#    app.kubernetes.io/instance: unifi
---
# Source: unifi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unifi
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi
    helm.sh/chart: unifi-0.4.0
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: unifi
      app.kubernetes.io/instance: unifi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: unifi
        app.kubernetes.io/instance: unifi
    spec:
      containers:
        - name: unifi
          image: index.docker.io/jacobalberty/unifi
          imagePullPolicy: IfNotPresent
          ports:
            - name: https-gui
              containerPort: 8443
              protocol: TCP
            - name: controller
              containerPort: 8080
              protocol: TCP
#            - name: discovery
#              containerPort: 10001
#              protocol: UDP
#            - name: stun
#              containerPort: 3478
#              protocol: UDP
          securityContext:
            capabilities:
              add:
                - SETFCAP
          livenessProbe:
            httpGet:
              path: /status
              port: https-gui
              scheme: HTTPS
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /status
              port: https-gui
              scheme: HTTPS
            initialDelaySeconds: 15
          env:
            - name: TZ
              value: "UTC+2"
            - name: RUNAS_UID0
              value: "false"
            - name: UNIFI_UID
              value: "999"
            - name: UNIFI_GID
              value: "999"
          volumeMounts:
            - mountPath: /unifi/data
              name: unifi-data
              subPath: data
            - mountPath: /unifi/log
              name: unifi-data
              subPath: log
            - mountPath: /unifi/cert
              name: unifi-data
              subPath: cert
            - mountPath: /unifi/init.d
              name: unifi-data
              subPath: init.d
          resources:
            requests:
              memory: "1G"
            limits:
              memory: "2G"
            
      volumes:
        - name: unifi-data
          persistentVolumeClaim:
            claimName: unifi
---
# Source: unifi/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: unifi-gui
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi
    helm.sh/chart: unifi-0.4.0
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Tiller
  annotations:
    ingress.kubernetes.io/auth-type: forward
    ingress.kubernetes.io/auth-url: http://forwardauth/authorize
    ingress.kubernetes.io/auth-response-headers: Authorization,X-FORWARDAUTH-NAME,X-FORWARDAUTH-SUB,X-FORWARDAUTH-EMAIL  
    kubernetes.io/ingress.class: traefik
    
spec:
  rules:
    - host: unifi.dniel.se
      http:
        paths:
          - backend:
              serviceName: unifi-gui
              servicePort: https-gui
---        
# Source: unifi/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: unifi-inform
  namespace: unifi
  labels:
    app.kubernetes.io/name: unifi
    helm.sh/chart: unifi-0.4.0
    app.kubernetes.io/instance: unifi
    app.kubernetes.io/managed-by: Tiller
  annotations:
    kubernetes.io/ingress.class: traefik
    
spec:
  rules:
    - host: unifi.dniel.se
      http:
        paths:
          - path: /inform
            backend:
              serviceName: unifi-controller
              servicePort: controller
